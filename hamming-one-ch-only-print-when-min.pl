#!/usr/bin/perl

use List::Util qw(min max);

################################################## define hamming distance (it is a fastest version i could find)
# XOR based Hamming distance subroutine
sub hd{
    return ($_[0] ^ $_[1]) =~ tr/\001-\255//;
}

################################################## define E1160, 4 versions for each 2-symbol



# 0 -> R, 1-> Y
$E2_RY1 ="RYYRYRRYYRYYRYRRYRRYYRYRRYRRYYRYRRYYRYYRYRYYRRYYRYRRRYRYYRYRRYRRYYYYRRYRRYYRYRRYYRYYRRRRYYRYYRYRYYRRYYRYRYRRRYYRYRRYYRYYRYRRYYRYRRYRRRYRYYRYRRYYRYYRYRRYRRYYRYYRYRRYYRYRRYYYRYRYRRRRYYYRYRRYRRYYYRRRYYRYYRYRRYRRYYYRRYRYRYRRYRYYYRYYRYRRYRRYYRYRRYYRYYRYRRYRRYYRRYYYRRRYYYRYRRRYYRYRRYYRRYRYRRYRYYYRYRRYYRYYRYRRYYRYRRYRRYYRYRRYYRRYRYYRYRYRRYRYRYYRYRRYYRYRRYRRYYRYRYRYYRYRYRYYRRRYRYRRYYYYRRYRRRYYRYRYYRYRRYYRYRRYRRYYRYRRYYYYRRYRRRYRYYYYRRYRRYYRYYRYRRYYRYRRYRRYYRYRRYYRYYRYRRYYRYRRYRRYYRYYRYRRRRYYYRYRRYYRRYYYRRRYRYYRYRRYRYYRRRYRYYRYYRYRRYRRYYRRYYYYRYRRYRRYRRYYYYRRYRRYYYRRRYYRYYRYRRYYRRYRYRRYRRYYRYYRYRRYRRYRYYYRYYRYRRYRRYYRRYRYYRYYRYRRYRRYRRYYRYYRYRRYYYRRRYYRYRRYYRYYRRRYYYRRRYYRYYRRRRYYYRRYRYYRYRRYRRYYRYRRYYRYYRYRYYRRYYRRYYRRRRYYYRYYRRYYRRRRYYRYYYRRYYRRRYYYRRRRYRYRYYRYYRYYRYRYRRRRYYYRRYYRYRRYYRYYRYRRYRRYRRYYRYRRYYRYYRYRRYYRRYRYRRYRYRYRYYYYRRRYRYRYYRRYRRYRYRYRYYRYRYYYRRYRYRRYRRYRYYYRRYRYYYRRRYYRYRRYRRYYRYYRRYYRRRYYRYRYYRRYYRYRRRYRYYRYRRYRYYRRYYRYRRYYRYRRYRYYYRYRRYYRRYRYRYYYRRYRYRRYYRYYRYRRYRRYRYYRRRYRYYRYRYYRRYYRYRRYYYRYRRRRYYRRYRYYRYRYYRRYYRYRRYYRYRYYRRYYRYRRRYRYYRYRRYYYRRRRYRYRYYRRYYRYRRYYRYYRYYRYRRYRRYRRYYYYRRRYYRRRYRYRYYRYRYYYRRYRYYRRYRYRRYRYRYYRRRYYYRYY";

# 0 -> Y, 1-> R
$E2_RY2 = "YRRYRYYRRYRRYRYYRYYRRYRYYRYYRRYRYYRRYRRYRYRRYYRRYRYYYRYRRYRYYRYYRRRRYYRYYRRYRYYRRYRRYYYYRRYRRYRYRRYYRRYRYRYYYRRYRYYRRYRRYRYYRRYRYYRYYYRYRRYRYYRRYRRYRYYRYYRRYRRYRYYRRYRYYRRRYRYRYYYYRRRYRYYRYYRRRYYYRRYRRYRYYRYYRRRYYRYRYRYYRYRRRYRRYRYYRYYRRYRYYRRYRRYRYYRYYRRYYRRRYYYRRRYRYYYRRYRYYRRYYRYRYYRYRRRYRYYRRYRRYRYYRRYRYYRYYRRYRYYRRYYRYRRYRYRYYRYRYRRYRYYRRYRYYRYYRRYRYRYRRYRYRYRRYYYRYRYYRRRRYYRYYYRRYRYRRYRYYRRYRYYRYYRRYRYYRRRRYYRYYYRYRRRRYYRYYRRYRRYRYYRRYRYYRYYRRYRYYRRYRRYRYYRRYRYYRYYRRYRRYRYYYYRRRYRYYRRYYRRRYYYRYRRYRYYRYRRYYYRYRRYRRYRYYRYYRRYYRRRRYRYYRYYRYYRRRRYYRYYRRRYYYRRYRRYRYYRRYYRYRYYRYYRRYRRYRYYRYYRYRRRYRRYRYYRYYRRYYRYRRYRRYRYYRYYRYYRRYRRYRYYRRRYYYRRYRYYRRYRRYYYRRRYYYRRYRRYYYYRRRYYRYRRYRYYRYYRRYRYYRRYRRYRYRRYYRRYYRRYYYYRRRYRRYYRRYYYYRRYRRRYYRRYYYRRRYYYYRYRYRRYRRYRRYRYRYYYYRRRYYRRYRYYRRYRRYRYYRYYRYYRRYRYYRRYRRYRYYRRYYRYRYYRYRYRYRRRRYYYRYRYRRYYRYYRYRYRYRRYRYRRRYYRYRYYRYYRYRRRYYRYRRRYYYRRYRYYRYYRRYRRYYRRYYYRRYRYRRYYRRYRYYYRYRRYRYYRYRRYYRRYRYYRRYRYYRYRRRYRYYRRYYRYRYRRRYYRYRYYRRYRRYRYYRYYRYRRYYYRYRRYRYRRYYRRYRYYRRRYRYYYYRRYYRYRRYRYRRYYRRYRYYRRYRYRRYYRRYRYYYRYRRYRYYRRRYYYYRYRYRRYYRRYRYYRRYRRYRRYRYYRYYRYYRRRRYYYRRYYYRYRYRRYRYRRRYYRYRRYYRYRYYRYRYRRYYYRRRYRR";

# reverse complement of E2_RY1
$E2_RY3= reverse($E2_RY1);
$E2_RY3 =~  tr/RY/YR/;

# reverse complement of E2_RY2
$E2_RY4= reverse($E2_RY2);
$E2_RY4 =~  tr/RY/YR/;


# 0 -> W, 1-> S


# 0 -> S, 1-> W


# reverse complement of E2_WS1
$E2_WS3= reverse($E2_WS1);


# reverse complement of E2_WS2
$E2_WS4= reverse($E2_WS2);

$LE2=length($E2);	# 1160


################################################## reading input
if($#ARGV !=1){ 
 print "[.pl] chr(can be X) min_Hamming)dis(348)\n"; 
exit; }
$chr=$ARGV[0];
$minhd= $ARGV[1]; # 348 or 30% of 1160;


########## input seq file
if($chr == 23){ $f="GRCh38/chrX.fa.gz";
}else{ $f="GRCh38/chr".$chr.".fa.gz"; }
if(-e $f){ if($f =~ m/\.gz/){ open(IN,"gunzip -c $f | "); }else{ open(IN,"< $f"); } }

################# read the seq
$seq_tmp=""; $line=0; while($_=<IN>){ if($_ =~ m/^>/){} else{ chop; $_ =~ s/\s+//g; $seq_tmp .= $_; $line++; }}
$L=length($seq_tmp);

################# convert. uppercase
$seq_ry=uc($seq_tmp);
# well, in principle, should keep RY. maybe the difference is small
# $seq_ry=~ tr/URYKMSWBDHV/N/;
$seq_ry=~ tr/UKMSWBDHV/N/;
$seq_ry=~ tr/AG/R/;
$seq_ry=~ tr/CT/Y/;

$seq_ws=uc($seq_tmp);
$seq_ws=~ tr/URYKMBDHV/N/;
$seq_ws=~ tr/AT/W/;
$seq_ws=~ tr/GC/S/;


################# convert. uppercase
$i=0;
while( length($tmp= substr $seq_tmp, $i, $LE2)== $LE2 ){

 $tmp_ry = substr($seq_ry, $i, $LE2);
 $tmp_ws = substr($seq_ws, $i, $LE2);
 
 $tmphd = hd($tmp_ry, $E2_RY1);
 $tmphd2 = hd($tmp_ry, $E2_RY2);
 $tmphd3 = hd($tmp_ry, $E2_RY3);
 $tmphd4 = hd($tmp_ry, $E2_RY4);

 $tmphd5 = hd($tmp_ws, $E2_WS1);
 $tmphd6 = hd($tmp_ws, $E2_WS2);
 $tmphd7 = hd($tmp_ws, $E2_WS3);
 $tmphd8 = hd($tmp_ws, $E2_WS4);

 $minH = min($tmphd,$tmphd2,$tmphd3,$tmphd4,$tmphd5,$tmphd6,$tmphd7,$tmphd8);

 if($minH <= $minhd){
  print "$chr $i $tmphd $tmphd2 $tmphd3 $tmphd4 $tmphd5 $tmphd6 $tmphd7 $tmphd8\n";
  # print "(v1) $i $tmphd < $minhd\n";
  $pos1=$i;
 }

$i++;
}




